"use server";
// This directive tells Next.js that this file is a Server Component/function,
// so that the code inside will run on the server rather than the browser.

// Import the database connection object from "@/db" so we can perform database operations.
import { db } from "@/db";

// Import TypeScript types for the allowed values used in a phone case configuration.
// These types are generated by Prisma and represent valid options stored in our database.
import {
  CaseColor, // Represents the valid colors available for the case.
  CaseFinish, // Represents the valid finishes (e.g., matte, glossy) available.
  CaseMaterial, // Represents the valid materials (e.g., plastic, metal) available.
  PhoneModel, // Represents the valid phone models that can be configured.
} from "@prisma/client";

/**
 * SaveConfigArgs defines the shape of the object that must be passed to our saveConfig function.
 * It ensures that all necessary customization data is provided.
 *
 * The properties are:
 * - color: The chosen color for the case.
 * - finish: The chosen finish for the case.
 * - material: The chosen material for the case.
 * - model: The phone model that the case is for.
 * - configId: The unique identifier of the configuration in our database.
 */
export type SaveConfigArgs = {
  color: CaseColor;
  finish: CaseFinish;
  material: CaseMaterial;
  model: PhoneModel;
  configId: string;
};

/**
 * The saveConfig function updates a phone case configuration in the database.
 * It receives an object with your customization choices and the configuration ID,
 * then updates the corresponding database record with the new details.
 *
 * Steps in this function:
 * 1. Use the db.configuration.update method to find the configuration record by the given configId.
 * 2. Update the record's fields with the provided color, finish, material, and model values.
 *
 * This function is async, meaning it runs asynchronously and returns a Promise.
 * It awaits the update operation, ensuring the configuration is saved before continuing.
 *
 * @param {SaveConfigArgs} args - The customization details and configuration id to update.
 */
export async function saveConfig({
  color,
  finish,
  material,
  model,
  configId,
}: SaveConfigArgs) {
  // Update the configuration record in the database that has an "id" equal to configId.
  // The "data" object specifies which fields to update: color, finish, material, and model.
  await db.configuration.update({
    where: { id: configId }, // Finds the configuration record with the matching configId.
    data: { color, finish, material, model }, // Sets the new customization values.
  });

  // No explicit return is needed because once the update is complete,
  // the Promise returned by this async function resolves.
}
